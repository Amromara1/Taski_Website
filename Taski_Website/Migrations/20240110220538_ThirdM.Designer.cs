// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taski_Website.Data;

#nullable disable

namespace Taski_Website.Migrations
{
    [DbContext(typeof(WebseiteContext))]
    [Migration("20240110220538_ThirdM")]
    partial class ThirdM
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("TaskiTaskTaskiUser", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskiTaskTaskiUser");
                });

            modelBuilder.Entity("Taski_Website.Model.TaskiTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            DueDate = new DateTime(2024, 1, 10, 23, 5, 37, 849, DateTimeKind.Local).AddTicks(1202),
                            TaskDescription = "Big Task 1",
                            TaskName = "Test Task 1",
                            TaskStatus = "Active"
                        },
                        new
                        {
                            TaskId = 2,
                            DueDate = new DateTime(2024, 1, 10, 23, 5, 37, 849, DateTimeKind.Local).AddTicks(1263),
                            TaskDescription = "Big Task",
                            TaskName = "Test Task 2",
                            TaskStatus = "Failed"
                        });
                });

            modelBuilder.Entity("Taski_Website.Model.TaskiUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "Muster_Teacher@Taski.de",
                            Password = "123",
                            Role = "Teacher",
                            UserName = "Muster_Teacher"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "Muster_Student@Taski.de",
                            Password = "123",
                            Role = "Student",
                            UserName = "Muster_Student"
                        });
                });

            modelBuilder.Entity("TaskiTaskTaskiUser", b =>
                {
                    b.HasOne("Taski_Website.Model.TaskiTask", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taski_Website.Model.TaskiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
